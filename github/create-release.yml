parameters:
  repositoryName: ''
  tag: 'v$(Build.BuildNumber)'
  releaseTitle: 'v$(Build.BuildNumber)'
  releaseNotes: ''

steps:
- bash: |
    if [ -z "$REPO_NAME" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"repositoryName\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TAG" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"tag\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$RELEASE_TITLE" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"releaseTitle\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$RELEASE_NOTES" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"releaseNotes\""
      echo "##vso[task.complete result=Failed;]"
    fi
  env:
    REPO_NAME: ${{ parameters.repositoryName }}
    TAG: ${{ parameters.tag }}
    RELEASE_TITLE: ${{ parameters.releaseTitle }}
    RELEASE_NOTES: ${{ parameters.releaseNotes }}
  displayName: Check for required parameters in YAML template
- bash: |
    if [ -z "TAG" ]; then
      echo "GitHub release is pre-release because of $TAG"
      echo "##vso[task.setvariable variable=isPreRelease]true"
      echo "##vso[task.setvariable variable=compareWith]lastRelease"
      echo "##vso[task.setvariable variable=releaseNotes]$RELEASE_NOTES"
      echo "##vso[task.setvariable variable=isDraft]false"
    else
      echo "GitHub release is full-release because of $TAG"
      echo "##vso[task.setvariable variable=isPreRelease]false"
      echo "##vso[task.setvariable variable=compareWith]lastFullRelease"

      releaseSummary = "
    ## What's new?
    ### Features

    ### Fixes / Changes
    None.

    ### Breaking Changes
    None.

    ### Removal
    None.
    "
    releaseNotes = "$RELEASE_NOTES$releaseSummary"
    echo "##vso[task.setvariable variable=releaseNotes]$releaseNotes"
    echo "##vso[task.setvariable variable=isDraft]true"
    fi
  env:
    TAG: ${{ parameters.tag }}
    RELEASE_NOTES: ${{ parameters.releaseNotes }}
  displayName: 'Determining sort of GitHub release'
- task: GitHubRelease@0
  displayName: 'Create GitHub Release for ${{ parameters.repositoryName }}'
  inputs:
    gitHubConnection: 'GitHub (arcus-automation - OAuth)'
    repositoryName: '${{ parameters.repositoryName }}'
    tagSource: manual
    tag: '${{ parameters.tag }}'
    title: '${{ parameters.releaseTitle }}'
    releaseNotesSource: input
    releaseNotes: '$(releaseNotes)'
    isPreRelease: $(isPreRelease)
    isDraft: $(isDraft)
    compareWith: $(compareWith)
