parameters:
  dotnetSdkVersion: ''
  versionSuffix: ''
  projects: 'src/*.sln'
  versionCommand: ''
  versionSuffixCommand: ''

steps:
- bash: |
    if [ -z "$DOTNET_SDK_VERSION" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"dotnetSdkVersion\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$VERSION_SUFFIX" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"versionSuffix\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$VERSION" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"version\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$PROJECTS" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"projects\""
      echo "##vso[task.complete result=Failed;]"
    fi
  env:
    DOTNET_SDK_VERSION: ${{ parameters.dotnetSdkVersion }}
    VERSION_SUFFIX: ${{ parameters.versionSuffix }}
    VERSION: ${{ parameters.version }}
    PROJECTS: ${{ parameters.projects }}
  displayName: Check for required parameters in YAML template
- powershell: |	
    $versionCommand = '';	
    if ('${{ parameters.version }}' -ne '') {	
      $versionCommand = '/property:Version=${{ parameters.version }}';	
    }	
    $versionSuffixCommand = '';	
    if ('${{ parameters.versionSuffix }}' -ne '') {	
      $versionSuffixCommand = '--version-suffix ${{ parameters.versionSuffix }}'	
    }

    Write-Host "Version command = $versionCommand"
    Write-Host "##vso[task.setvariable variable=versionCommand]$versionCommand"

    Write-Host "Version suffix command = $versionSuffixCommand"
    Write-Host "##vso[task.setvariable variable=versionSuffixCommand]$versionSuffixCommand"
  displayName: 'Determine version/version-suffix commands'
- task: DotNetCoreInstaller@0
  displayName: 'Import .NET Core SDK (${{ parameters.dotnetSdkVersion }})'
  inputs:
    version: '${{ parameters.dotnetSdkVersion }}'
- task: DotNetCoreCLI@2
  displayName: 'Compile'
  inputs:
    projects: '${{ parameters.projects }}'
    arguments: '--configuration $(Build.Configuration) --version-suffix ${{ parameters.versionSuffix }}'